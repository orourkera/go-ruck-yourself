"""Change user id to UUID

Revision ID: a29d11a26a41
Revises: 
Create Date: 2025-05-03 20:52:21.849230

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'a29d11a26a41'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('user',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('username', sa.String(length=64), nullable=False),
    sa.Column('email', sa.String(length=120), nullable=False),
    sa.Column('password_hash', sa.String(length=256), nullable=True),
    sa.Column('weight_kg', sa.Float(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email'),
    sa.UniqueConstraint('username')
    )
    op.create_table('ruck_session',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('ruck_weight_kg', sa.Float(), nullable=False),
    sa.Column('start_time', sa.DateTime(), nullable=True),
    sa.Column('end_time', sa.DateTime(), nullable=True),
    sa.Column('duration_seconds', sa.Integer(), nullable=True),
    sa.Column('paused_duration_seconds', sa.Integer(), nullable=True),
    sa.Column('status', sa.String(length=20), nullable=True),
    sa.Column('distance_km', sa.Float(), nullable=True),
    sa.Column('elevation_gain_m', sa.Float(), nullable=True),
    sa.Column('elevation_loss_m', sa.Float(), nullable=True),
    sa.Column('calories_burned', sa.Float(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('location_point',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('session_id', sa.Integer(), nullable=False),
    sa.Column('latitude', sa.Float(), nullable=False),
    sa.Column('longitude', sa.Float(), nullable=False),
    sa.Column('altitude', sa.Float(), nullable=True),
    sa.Column('timestamp', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['session_id'], ['ruck_session.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('session_review',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('session_id', sa.Integer(), nullable=False),
    sa.Column('rating', sa.Integer(), nullable=False),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['session_id'], ['ruck_session.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('session_id')
    )
    # Reordered drop commands to respect dependencies
    op.drop_table('ruck_session_locations')
    op.drop_table('ruck_sessions')
    op.drop_table('profiles')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('ruck_session_locations',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('session_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('latitude', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('longitude', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('elevation', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('timestamp', postgresql.TIMESTAMP(timezone=True), server_default=sa.text("timezone('utc'::text, now())"), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text("timezone('utc'::text, now())"), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['session_id'], ['ruck_sessions.id'], name='fk_ruck_session_locations_session', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['session_id'], ['ruck_sessions.id'], name='ruck_session_locations_session_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='ruck_session_locations_pkey')
    )
    op.create_table('profiles',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False, comment='Links to the auth.users table.'),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('weight_kg', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True, comment='User weight stored in kilograms.'),
    sa.Column('preferMetric', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False, comment='Indicates user preference for metric (true) or imperial (false) units display.'),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['id'], ['auth.users.id'], name='fk_profiles_user', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['id'], ['auth.users.id'], name='profiles_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='profiles_pkey'),
    comment='Stores public profile information for each user.'
    )
    op.create_table('ruck_sessions',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('status', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('ruck_weight_kg', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('user_weight_kg', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('planned_duration_minutes', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text("timezone('utc'::text, now())"), autoincrement=False, nullable=False),
    sa.Column('started_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('paused_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('completed_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('distance_km', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('elevation_gain_meters', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('elevation_loss_meters', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('calories_burned', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('duration_seconds', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('average_pace_min_km', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('rating', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('perceived_exertion', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('tags', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['auth.users.id'], name='fk_ruck_sessions_user', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['auth.users.id'], name='ruck_sessions_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='ruck_sessions_pkey')
    )
    # Reorder drop commands to respect dependencies
    op.drop_table('session_review')
    op.drop_table('location_point')
    op.drop_table('ruck_session')
    op.drop_table('user')
    # ### end Alembic commands ###
