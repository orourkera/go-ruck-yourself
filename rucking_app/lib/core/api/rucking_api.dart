// Autogenerated from Pigeon (v25.3.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import, no_leading_underscores_for_local_identifiers

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

PlatformException _createConnectionError(String channelName) {
  return PlatformException(
    code: 'channel-error',
    message: 'Unable to establish connection on channel: "$channelName".',
  );
}

List<Object?> wrapResponse({Object? result, PlatformException? error, bool empty = false}) {
  if (empty) {
    return <Object?>[];
  }
  if (error == null) {
    return <Object?>[result];
  }
  return <Object?>[error.code, error.message, error.details];
}


class _PigeonCodec extends StandardMessageCodec {
  const _PigeonCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is int) {
      buffer.putUint8(4);
      buffer.putInt64(value);
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

/// Messages from native (Watch) to Flutter
abstract class RuckingApi {
  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  /// Start a new session from the watch
  Future<bool> startSessionFromWatch(double ruckWeight);

  /// Start a session on the watch (Flutter -> native)
  Future<bool> startSessionOnWatch(double ruckWeight);

  /// Update session metrics on the watch (Flutter -> native)
  Future<bool> updateSessionOnWatch(double distance, double duration, double pace, bool isPaused, double calories, double elevationGain, double elevationLoss);

  /// Pause an active session from the watch
  Future<bool> pauseSessionFromWatch();

  /// Resume a paused session from the watch
  Future<bool> resumeSessionFromWatch();

  /// End the current session from the watch
  Future<bool> endSessionFromWatch(int duration, double distance, double calories);

  /// Update heart rate from the watch
  Future<bool> updateHeartRateFromWatch(double heartRate);

  static void setUp(RuckingApi? api, {BinaryMessenger? binaryMessenger, String messageChannelSuffix = '',}) {
    messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.rucking_app.RuckingApi.startSessionFromWatch$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.rucking_app.RuckingApi.startSessionFromWatch was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final double? arg_ruckWeight = (args[0] as double?);
          assert(arg_ruckWeight != null,
              'Argument for dev.flutter.pigeon.rucking_app.RuckingApi.startSessionFromWatch was null, expected non-null double.');
          try {
            final bool output = await api.startSessionFromWatch(arg_ruckWeight!);
            return wrapResponse(result: output);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.rucking_app.RuckingApi.startSessionOnWatch$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.rucking_app.RuckingApi.startSessionOnWatch was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final double? arg_ruckWeight = (args[0] as double?);
          assert(arg_ruckWeight != null,
              'Argument for dev.flutter.pigeon.rucking_app.RuckingApi.startSessionOnWatch was null, expected non-null double.');
          try {
            final bool output = await api.startSessionOnWatch(arg_ruckWeight!);
            return wrapResponse(result: output);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.rucking_app.RuckingApi.updateSessionOnWatch$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.rucking_app.RuckingApi.updateSessionOnWatch was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final double? arg_distance = (args[0] as double?);
          assert(arg_distance != null,
              'Argument for dev.flutter.pigeon.rucking_app.RuckingApi.updateSessionOnWatch was null, expected non-null double.');
          final double? arg_duration = (args[1] as double?);
          assert(arg_duration != null,
              'Argument for dev.flutter.pigeon.rucking_app.RuckingApi.updateSessionOnWatch was null, expected non-null double.');
          final double? arg_pace = (args[2] as double?);
          assert(arg_pace != null,
              'Argument for dev.flutter.pigeon.rucking_app.RuckingApi.updateSessionOnWatch was null, expected non-null double.');
          final bool? arg_isPaused = (args[3] as bool?);
          assert(arg_isPaused != null,
              'Argument for dev.flutter.pigeon.rucking_app.RuckingApi.updateSessionOnWatch was null, expected non-null bool.');
          final double? arg_calories = (args[4] as double?);
          assert(arg_calories != null,
              'Argument for dev.flutter.pigeon.rucking_app.RuckingApi.updateSessionOnWatch was null, expected non-null double.');
          final double? arg_elevationGain = (args[5] as double?);
          assert(arg_elevationGain != null,
              'Argument for dev.flutter.pigeon.rucking_app.RuckingApi.updateSessionOnWatch was null, expected non-null double.');
          final double? arg_elevationLoss = (args[6] as double?);
          assert(arg_elevationLoss != null,
              'Argument for dev.flutter.pigeon.rucking_app.RuckingApi.updateSessionOnWatch was null, expected non-null double.');
          try {
            final bool output = await api.updateSessionOnWatch(arg_distance!, arg_duration!, arg_pace!, arg_isPaused!, arg_calories!, arg_elevationGain!, arg_elevationLoss!);
            return wrapResponse(result: output);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.rucking_app.RuckingApi.pauseSessionFromWatch$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          try {
            final bool output = await api.pauseSessionFromWatch();
            return wrapResponse(result: output);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.rucking_app.RuckingApi.resumeSessionFromWatch$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          try {
            final bool output = await api.resumeSessionFromWatch();
            return wrapResponse(result: output);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.rucking_app.RuckingApi.endSessionFromWatch$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.rucking_app.RuckingApi.endSessionFromWatch was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final int? arg_duration = (args[0] as int?);
          assert(arg_duration != null,
              'Argument for dev.flutter.pigeon.rucking_app.RuckingApi.endSessionFromWatch was null, expected non-null int.');
          final double? arg_distance = (args[1] as double?);
          assert(arg_distance != null,
              'Argument for dev.flutter.pigeon.rucking_app.RuckingApi.endSessionFromWatch was null, expected non-null double.');
          final double? arg_calories = (args[2] as double?);
          assert(arg_calories != null,
              'Argument for dev.flutter.pigeon.rucking_app.RuckingApi.endSessionFromWatch was null, expected non-null double.');
          try {
            final bool output = await api.endSessionFromWatch(arg_duration!, arg_distance!, arg_calories!);
            return wrapResponse(result: output);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.rucking_app.RuckingApi.updateHeartRateFromWatch$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.rucking_app.RuckingApi.updateHeartRateFromWatch was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final double? arg_heartRate = (args[0] as double?);
          assert(arg_heartRate != null,
              'Argument for dev.flutter.pigeon.rucking_app.RuckingApi.updateHeartRateFromWatch was null, expected non-null double.');
          try {
            final bool output = await api.updateHeartRateFromWatch(arg_heartRate!);
            return wrapResponse(result: output);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
  }
}

/// Messages from Flutter to native (Watch)
class FlutterRuckingApi {
  /// Constructor for [FlutterRuckingApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  FlutterRuckingApi({BinaryMessenger? binaryMessenger, String messageChannelSuffix = ''})
      : pigeonVar_binaryMessenger = binaryMessenger,
        pigeonVar_messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
  final BinaryMessenger? pigeonVar_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  final String pigeonVar_messageChannelSuffix;

  /// Update session metrics on the watch
  Future<void> updateSessionOnWatch(double distance, double duration, double pace, bool isPaused, double calories, double elevationGain, double elevationLoss) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.rucking_app.FlutterRuckingApi.updateSessionOnWatch$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[distance, duration, pace, isPaused, calories, elevationGain, elevationLoss]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  /// Start a session on the watch
  Future<void> startSessionOnWatch(double ruckWeight) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.rucking_app.FlutterRuckingApi.startSessionOnWatch$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[ruckWeight]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  /// Pause a session on the watch
  Future<void> pauseSessionOnWatch() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.rucking_app.FlutterRuckingApi.pauseSessionOnWatch$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  /// Resume a session on the watch
  Future<void> resumeSessionOnWatch() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.rucking_app.FlutterRuckingApi.resumeSessionOnWatch$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  /// End a session on the watch
  Future<void> endSessionOnWatch() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.rucking_app.FlutterRuckingApi.endSessionOnWatch$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }
}
