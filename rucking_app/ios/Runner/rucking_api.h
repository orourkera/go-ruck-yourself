// Autogenerated from Pigeon (v25.3.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#import <Foundation/Foundation.h>

@protocol FlutterBinaryMessenger;
@protocol FlutterMessageCodec;
@class FlutterError;
@class FlutterStandardTypedData;

NS_ASSUME_NONNULL_BEGIN


/// The codec used by all APIs.
NSObject<FlutterMessageCodec> *nullGetRuckingApiCodec(void);

/// Messages from Watch to Flutter
@protocol RuckingApi
/// Start a new session from the watch
- (void)startSessionFromWatchRuckWeight:(double)ruckWeight completion:(void (^)(NSNumber *_Nullable, FlutterError *_Nullable))completion;
/// Pause an active session from the watch
- (void)pauseSessionFromWatchWithCompletion:(void (^)(NSNumber *_Nullable, FlutterError *_Nullable))completion;
/// Resume a paused session from the watch
- (void)resumeSessionFromWatchWithCompletion:(void (^)(NSNumber *_Nullable, FlutterError *_Nullable))completion;
/// End the current session from the watch
- (void)endSessionFromWatchDuration:(NSInteger)duration distance:(double)distance calories:(double)calories completion:(void (^)(NSNumber *_Nullable, FlutterError *_Nullable))completion;
/// Update heart rate from the watch
- (void)updateHeartRateFromWatchHeartRate:(double)heartRate completion:(void (^)(NSNumber *_Nullable, FlutterError *_Nullable))completion;
@end

extern void SetUpRuckingApi(id<FlutterBinaryMessenger> binaryMessenger, NSObject<RuckingApi> *_Nullable api);

extern void SetUpRuckingApiWithSuffix(id<FlutterBinaryMessenger> binaryMessenger, NSObject<RuckingApi> *_Nullable api, NSString *messageChannelSuffix);


/// Messages from Flutter to Watch
@interface FlutterRuckingApi : NSObject
- (instancetype)initWithBinaryMessenger:(id<FlutterBinaryMessenger>)binaryMessenger;
- (instancetype)initWithBinaryMessenger:(id<FlutterBinaryMessenger>)binaryMessenger messageChannelSuffix:(nullable NSString *)messageChannelSuffix;
/// Update session metrics on the watch
- (void)updateSessionOnWatchDistance:(double)distance duration:(double)duration pace:(double)pace isPaused:(BOOL)isPaused completion:(void (^)(FlutterError *_Nullable))completion;
/// Start a session on the watch
- (void)startSessionOnWatchRuckWeight:(double)ruckWeight completion:(void (^)(FlutterError *_Nullable))completion;
/// Pause a session on the watch
- (void)pauseSessionOnWatchWithCompletion:(void (^)(FlutterError *_Nullable))completion;
/// Resume a session on the watch
- (void)resumeSessionOnWatchWithCompletion:(void (^)(FlutterError *_Nullable))completion;
/// End a session on the watch
- (void)endSessionOnWatchWithCompletion:(void (^)(FlutterError *_Nullable))completion;
@end

NS_ASSUME_NONNULL_END
