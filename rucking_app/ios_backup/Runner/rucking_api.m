// Autogenerated from Pigeon (v25.3.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#import "rucking_api.h"

#if TARGET_OS_OSX
#import <FlutterMacOS/FlutterMacOS.h>
#else
#import <Flutter/Flutter.h>
#endif

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSArray<id> *wrapResult(id result, FlutterError *error) {
  if (error) {
    return @[
      error.code ?: [NSNull null], error.message ?: [NSNull null], error.details ?: [NSNull null]
    ];
  }
  return @[ result ?: [NSNull null] ];
}

static FlutterError *createConnectionError(NSString *channelName) {
  return [FlutterError errorWithCode:@"channel-error" message:[NSString stringWithFormat:@"%@/%@/%@", @"Unable to establish connection on channel: '", channelName, @"'."] details:@""];
}

static id GetNullableObjectAtIndex(NSArray<id> *array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}

@interface nullRuckingApiPigeonCodecReader : FlutterStandardReader
@end
@implementation nullRuckingApiPigeonCodecReader
- (nullable id)readValueOfType:(UInt8)type {
  switch (type) {
    default:
      return [super readValueOfType:type];
  }
}
@end

@interface nullRuckingApiPigeonCodecWriter : FlutterStandardWriter
@end
@implementation nullRuckingApiPigeonCodecWriter
- (void)writeValue:(id)value {
  {
    [super writeValue:value];
  }
}
@end

@interface nullRuckingApiPigeonCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation nullRuckingApiPigeonCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[nullRuckingApiPigeonCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[nullRuckingApiPigeonCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *nullGetRuckingApiCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
    nullRuckingApiPigeonCodecReaderWriter *readerWriter = [[nullRuckingApiPigeonCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}
@interface RuckingApi ()
@property(nonatomic, strong) NSObject<FlutterBinaryMessenger> *binaryMessenger;
@property(nonatomic, strong) NSString *messageChannelSuffix;
@end

@implementation RuckingApi

- (instancetype)initWithBinaryMessenger:(NSObject<FlutterBinaryMessenger> *)binaryMessenger {
  return [self initWithBinaryMessenger:binaryMessenger messageChannelSuffix:@""];
}
- (instancetype)initWithBinaryMessenger:(NSObject<FlutterBinaryMessenger> *)binaryMessenger messageChannelSuffix:(nullable NSString*)messageChannelSuffix{
  self = [self init];
  if (self) {
    _binaryMessenger = binaryMessenger;
    _messageChannelSuffix = [messageChannelSuffix length] == 0 ? @"" : [NSString stringWithFormat: @".%@", messageChannelSuffix];
  }
  return self;
}
- (void)startSessionFromWatchRuckWeight:(double)arg_ruckWeight completion:(void (^)(NSNumber *_Nullable, FlutterError *_Nullable))completion {
  NSString *channelName = [NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.rucking_app.RuckingApi.startSessionFromWatch", _messageChannelSuffix];
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:channelName
      binaryMessenger:self.binaryMessenger
      codec:nullGetRuckingApiCodec()];
  [channel sendMessage:@[@(arg_ruckWeight)] reply:^(NSArray<id> *reply) {
    if (reply != nil) {
      if (reply.count > 1) {
        completion(nil, [FlutterError errorWithCode:reply[0] message:reply[1] details:reply[2]]);
      } else {
        NSNumber *output = reply[0] == [NSNull null] ? nil : reply[0];
        completion(output, nil);
      }
    } else {
      completion(nil, createConnectionError(channelName));
    } 
  }];
}
- (void)startSessionOnWatchRuckWeight:(double)arg_ruckWeight completion:(void (^)(NSNumber *_Nullable, FlutterError *_Nullable))completion {
  NSString *channelName = [NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.rucking_app.RuckingApi.startSessionOnWatch", _messageChannelSuffix];
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:channelName
      binaryMessenger:self.binaryMessenger
      codec:nullGetRuckingApiCodec()];
  [channel sendMessage:@[@(arg_ruckWeight)] reply:^(NSArray<id> *reply) {
    if (reply != nil) {
      if (reply.count > 1) {
        completion(nil, [FlutterError errorWithCode:reply[0] message:reply[1] details:reply[2]]);
      } else {
        NSNumber *output = reply[0] == [NSNull null] ? nil : reply[0];
        completion(output, nil);
      }
    } else {
      completion(nil, createConnectionError(channelName));
    } 
  }];
}
- (void)updateSessionOnWatchDistance:(double)arg_distance duration:(double)arg_duration pace:(double)arg_pace isPaused:(BOOL)arg_isPaused completion:(void (^)(NSNumber *_Nullable, FlutterError *_Nullable))completion {
  NSString *channelName = [NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.rucking_app.RuckingApi.updateSessionOnWatch", _messageChannelSuffix];
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:channelName
      binaryMessenger:self.binaryMessenger
      codec:nullGetRuckingApiCodec()];
  [channel sendMessage:@[@(arg_distance), @(arg_duration), @(arg_pace), @(arg_isPaused)] reply:^(NSArray<id> *reply) {
    if (reply != nil) {
      if (reply.count > 1) {
        completion(nil, [FlutterError errorWithCode:reply[0] message:reply[1] details:reply[2]]);
      } else {
        NSNumber *output = reply[0] == [NSNull null] ? nil : reply[0];
        completion(output, nil);
      }
    } else {
      completion(nil, createConnectionError(channelName));
    } 
  }];
}
- (void)pauseSessionFromWatchWithCompletion:(void (^)(NSNumber *_Nullable, FlutterError *_Nullable))completion {
  NSString *channelName = [NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.rucking_app.RuckingApi.pauseSessionFromWatch", _messageChannelSuffix];
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:channelName
      binaryMessenger:self.binaryMessenger
      codec:nullGetRuckingApiCodec()];
  [channel sendMessage:nil reply:^(NSArray<id> *reply) {
    if (reply != nil) {
      if (reply.count > 1) {
        completion(nil, [FlutterError errorWithCode:reply[0] message:reply[1] details:reply[2]]);
      } else {
        NSNumber *output = reply[0] == [NSNull null] ? nil : reply[0];
        completion(output, nil);
      }
    } else {
      completion(nil, createConnectionError(channelName));
    } 
  }];
}
- (void)resumeSessionFromWatchWithCompletion:(void (^)(NSNumber *_Nullable, FlutterError *_Nullable))completion {
  NSString *channelName = [NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.rucking_app.RuckingApi.resumeSessionFromWatch", _messageChannelSuffix];
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:channelName
      binaryMessenger:self.binaryMessenger
      codec:nullGetRuckingApiCodec()];
  [channel sendMessage:nil reply:^(NSArray<id> *reply) {
    if (reply != nil) {
      if (reply.count > 1) {
        completion(nil, [FlutterError errorWithCode:reply[0] message:reply[1] details:reply[2]]);
      } else {
        NSNumber *output = reply[0] == [NSNull null] ? nil : reply[0];
        completion(output, nil);
      }
    } else {
      completion(nil, createConnectionError(channelName));
    } 
  }];
}
- (void)endSessionFromWatchDuration:(NSInteger)arg_duration distance:(double)arg_distance calories:(double)arg_calories completion:(void (^)(NSNumber *_Nullable, FlutterError *_Nullable))completion {
  NSString *channelName = [NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.rucking_app.RuckingApi.endSessionFromWatch", _messageChannelSuffix];
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:channelName
      binaryMessenger:self.binaryMessenger
      codec:nullGetRuckingApiCodec()];
  [channel sendMessage:@[@(arg_duration), @(arg_distance), @(arg_calories)] reply:^(NSArray<id> *reply) {
    if (reply != nil) {
      if (reply.count > 1) {
        completion(nil, [FlutterError errorWithCode:reply[0] message:reply[1] details:reply[2]]);
      } else {
        NSNumber *output = reply[0] == [NSNull null] ? nil : reply[0];
        completion(output, nil);
      }
    } else {
      completion(nil, createConnectionError(channelName));
    } 
  }];
}
- (void)updateHeartRateFromWatchHeartRate:(double)arg_heartRate completion:(void (^)(NSNumber *_Nullable, FlutterError *_Nullable))completion {
  NSString *channelName = [NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.rucking_app.RuckingApi.updateHeartRateFromWatch", _messageChannelSuffix];
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:channelName
      binaryMessenger:self.binaryMessenger
      codec:nullGetRuckingApiCodec()];
  [channel sendMessage:@[@(arg_heartRate)] reply:^(NSArray<id> *reply) {
    if (reply != nil) {
      if (reply.count > 1) {
        completion(nil, [FlutterError errorWithCode:reply[0] message:reply[1] details:reply[2]]);
      } else {
        NSNumber *output = reply[0] == [NSNull null] ? nil : reply[0];
        completion(output, nil);
      }
    } else {
      completion(nil, createConnectionError(channelName));
    } 
  }];
}
@end

void SetUpFlutterRuckingApi(id<FlutterBinaryMessenger> binaryMessenger, NSObject<FlutterRuckingApi> *api) {
  SetUpFlutterRuckingApiWithSuffix(binaryMessenger, api, @"");
}

void SetUpFlutterRuckingApiWithSuffix(id<FlutterBinaryMessenger> binaryMessenger, NSObject<FlutterRuckingApi> *api, NSString *messageChannelSuffix) {
  messageChannelSuffix = messageChannelSuffix.length > 0 ? [NSString stringWithFormat: @".%@", messageChannelSuffix] : @"";
  /// Update session metrics on the watch
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.rucking_app.FlutterRuckingApi.updateSessionOnWatch", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:nullGetRuckingApiCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(updateSessionOnWatchDistance:duration:pace:isPaused:error:)], @"FlutterRuckingApi api (%@) doesn't respond to @selector(updateSessionOnWatchDistance:duration:pace:isPaused:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        double arg_distance = [GetNullableObjectAtIndex(args, 0) doubleValue];
        double arg_duration = [GetNullableObjectAtIndex(args, 1) doubleValue];
        double arg_pace = [GetNullableObjectAtIndex(args, 2) doubleValue];
        BOOL arg_isPaused = [GetNullableObjectAtIndex(args, 3) boolValue];
        FlutterError *error;
        [api updateSessionOnWatchDistance:arg_distance duration:arg_duration pace:arg_pace isPaused:arg_isPaused error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// Start a session on the watch
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.rucking_app.FlutterRuckingApi.startSessionOnWatch", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:nullGetRuckingApiCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(startSessionOnWatchRuckWeight:error:)], @"FlutterRuckingApi api (%@) doesn't respond to @selector(startSessionOnWatchRuckWeight:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        double arg_ruckWeight = [GetNullableObjectAtIndex(args, 0) doubleValue];
        FlutterError *error;
        [api startSessionOnWatchRuckWeight:arg_ruckWeight error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// Pause a session on the watch
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.rucking_app.FlutterRuckingApi.pauseSessionOnWatch", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:nullGetRuckingApiCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(pauseSessionOnWatchWithError:)], @"FlutterRuckingApi api (%@) doesn't respond to @selector(pauseSessionOnWatchWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api pauseSessionOnWatchWithError:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// Resume a session on the watch
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.rucking_app.FlutterRuckingApi.resumeSessionOnWatch", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:nullGetRuckingApiCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(resumeSessionOnWatchWithError:)], @"FlutterRuckingApi api (%@) doesn't respond to @selector(resumeSessionOnWatchWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api resumeSessionOnWatchWithError:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// End a session on the watch
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.rucking_app.FlutterRuckingApi.endSessionOnWatch", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:nullGetRuckingApiCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(endSessionOnWatchWithError:)], @"FlutterRuckingApi api (%@) doesn't respond to @selector(endSessionOnWatchWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api endSessionOnWatchWithError:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
